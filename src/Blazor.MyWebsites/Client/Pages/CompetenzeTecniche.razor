@page "/CompetenzeTecniche"
@using System.Text.RegularExpressions
@using System.Web
@using Blazor.MyWebsites.Shared.Models.ViewModels
@inject HttpClient Http

<h3>Competenze Tecniche</h3>

@*@if (skills == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
<MudTable Items="@skills" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<SkillTecnica, object>(x=>x.AreaTecnica)">Area Tecnica</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SkillTecnica, object>(x=>x.Competenza)">Competenza</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Area Tecnica">@context.AreaTecnica</MudTd>
        <MudTd DataLabel="Competenza">@((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(@context.Competenza), "\r?\n|\r", "<br />"))</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" />
    </PagerContent>
</MudTable>
}*@

<SpinnerLoader IsLoading="isLoading" HasError="hasError" Size="46px" AccentColor="#3498db" Color="White" Center="true" Spinner="SpinnerTemplate.Loader1">
    <ContentTemplate>
        <MudTable Items="@skills" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<SkillTecnica, object>(x=>x.AreaTecnica)">Area Tecnica</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<SkillTecnica, object>(x=>x.Competenza)">Competenza</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Area Tecnica">@context.AreaTecnica</MudTd>
                <MudTd DataLabel="Competenza">@((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(@context.Competenza), "\r?\n|\r", "<br />"))</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="pageSizeOptions" />
            </PagerContent>
        </MudTable>
    </ContentTemplate>
    <ErrorContentTemplate>
        <tr>
            <td colspan="4">
                <div class="alert alert-danger">Loading failed</div>
            </td>
        </tr>
    </ErrorContentTemplate>
</SpinnerLoader>

@code {
    List<SkillTecnica> skills;

    private int[] pageSizeOptions = new int[] { 5, 10, 15 };

    private bool hasError = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.Delay(5000);

        try
        {
            await LoadSkills();
        }
        catch (Exception)
        {
            hasError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSkills()
    {
        skills = await Http.GetFromJsonAsync<List<SkillTecnica>>("api/WebSites/LoadCompetenzeTecniche");
    }
}